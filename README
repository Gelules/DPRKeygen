DPRKeygen: The Red Star OS 3 Server Keygen.

Usage:
    make
    ./dprkeygen MACHINE_ID

A MACHINE_ID starts with "RSS3" and is 16 characters long.

How does it work:
    It hashes the MACHINE_ID into a "MDK" algorithm (I call it Korean MD5).
    It's a real MD5, they just do some funny bitwise operations at the end.

Why?:
    Read the other text file which was provided with the ISO. Originally, you
    had to put first a boot.iso file and then hot swap with the real iso file to
    bypass the license key. slipstream then ask if someone would try to make a
    keygen out of it. I searched for the keygen on Internet but apparently, no
    one has ever been published. Now, it is.

    Now everyone is able to install Red Star OS 3 Server on any machine!

Technically:
    The interesting binary is located in ./isolinux/initrd.img{/sbin/loader}.
    I first reversed it to automatically bypass the screen asking for the
    license. But where is the fun in that?
    The code you're looking for if you want to try is located at 0x080539f7. It
    is a strcmp between your input and the actual key.

    The funny part is: the keygen is already included. It generates a license
    key from the machine id. So, exporting the code would be simple enough,
    right?

    The code is just a MD5 algorith with some change at the end.

    First of all, a MD5 Context structure looks like this
    ```c
    struct MD5
    {
        unsigned bitscount[2];
        unsigned state[4];
        unsigned data[16];
        unsigned num; // not interesting here
    };
    ```

    The Korean structure looks like this
    ```c
    struct MD5
    {
        unsigned bitscount[2];
        unsigned state[4];
        unsigned data[16];
        unsigned key[16]; // really interesting here
    };
    ```

    They put the value of the license key from the data with some bitwise
    operations.

   ```c
    unsigned i = 0;
    unsigned j = 0;
    for (;i < 64; i += 4, j += 1)
    {
        unsigned value = mdk.buf[j];
        mdk.result[i] = value;
        mdk.result[i + 1] = (char)(value >> 8) & 0x1f;
        mdk.result[i + 2] = (char)(value >> 16) & 0x4f;
        mdk.result[i + 3] = (char)(value >> 24) & 0x8f;
    }
   ```

Funfacts:
    Some odd sentences are inside the binary. Odds because of some basic English
    mistakes, such as "We provides a experimental version to you.".

    Also, Google Translate translates the first part of the screen displaying an
    error as "Breast milk".

    I used the Rubber duck debugging method to understand kinda everything.
    Quack!

Now?:
    Where Red Star OS 4?

Requirements:
    * gcc
    * make
